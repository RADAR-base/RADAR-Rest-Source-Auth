---
version: '3.2'

services:

  #---------------------------------------------------------------------------#
  # Management Portal                                                         #
  #---------------------------------------------------------------------------#
  managementportal:
    image: radarbase/management-portal:2.0.0
    depends_on:
      - mp-postgresql
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://mp-postgresql:5432/managementportal
      SPRING_DATASOURCE_USERNAME: radarcns
      SPRING_DATASOURCE_PASSWORD: radarcns
      MANAGEMENTPORTAL_FRONTEND_CLIENT_SECRET: "testMe"
      MANAGEMENTPORTAL_COMMON_BASE_URL: http://localhost:8080/managementportal
      MANAGEMENTPORTAL_COMMON_MANAGEMENT_PORTAL_BASE_URL: http://localhost:8080/managementportal
      MANAGEMENTPORTAL_OAUTH_CLIENTS_FILE: /mp-includes/config/oauth_client_details.csv
      MANAGEMENTPORTAL_CATALOGUE_SERVER_ENABLE_AUTO_IMPORT: 'false'
      MANAGEMENTPORTAL_OAUTH_SIGNING_KEY_ALIAS: 'radarbase-managementportal-ec'
      SERVER_SERVLET_SESSION_COOKIE_SECURE: "false"
      JAVA_OPTS: -Xmx256m  # maximum heap size for the JVM running ManagementPortal, increase this as necessary
    volumes:
      - ./docker/etc/managementportal/:/mp-includes/config
    labels:
      - "traefik.http.routers.managementportal.rule=PathPrefix(`/managementportal`)"
      - "traefik.http.services.managementportal.loadbalancer.server.port=8080"

  mp-postgresql:
    image: bitnami/postgresql:15
    environment:
      - POSTGRESQL_USERNAME=radarcns
      - POSTGRESQL_PASSWORD=radarcns
      - POSTGRESQL_DATABASE=managementportal
    labels:
      - "traefik.enable=false"

  rest-auth-postgresql:
    image: bitnami/postgresql:15
    environment:
      - POSTGRESQL_USERNAME=radarcns
      - POSTGRESQL_PASSWORD=radarcns
      - POSTGRESQL_DATABASE=restsourceauthorizer
    labels:
      - "traefik.enable=false"

  radar-rest-sources-backend:
    image: radarbase/radar-rest-source-auth-backend:dev
    build:
      context: .
      dockerfile: authorizer-app-backend/Dockerfile
    depends_on:
      - rest-auth-postgresql
      - managementportal
    volumes:
      - ./docker/etc/rest-source-authorizer/authorizer.yml:/etc/authorizer-app-backend/authorizer.yml
    command: ["authorizer-app-backend", "/etc/authorizer-app-backend/authorizer.yml"]
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "http://localhost:8085/rest-sources/backend/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.http.routers.backend.rule=PathPrefix(`/rest-sources/backend`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8085"

  radar-rest-sources-authorizer:
    image: radarbase/radar-rest-source-authorizer:dev
    build:
      context: authorizer-app
      dockerfile: Dockerfile
    depends_on:
      - radar-rest-sources-backend
      - managementportal
    environment:
      BASE_HREF: "/rest-sources/authorizer/"
      BACKEND_BASE_URL: "http://localhost:8080/rest-sources/backend"
      VALIDATE: "true"
      AUTH_GRANT_TYPE: "authorization_code"
      AUTH_CLIENT_ID: "radar_rest_sources_authorizer"
      AUTH_CLIENT_SECRET: ""
      AUTH_CALLBACK_URL: "http://localhost:8080/rest-sources/authorizer/login"
      AUTH_URI: "http://localhost:8080/managementportal/oauth"
    healthcheck:
      test: ["CMD", "curl", "--fail-with-body", "http://localhost:8080/rest-sources/authorizer"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.http.routers.rest-auth.rule=PathPrefix(`/rest-sources/authorizer`)"
      - "traefik.http.services.rest-auth.loadbalancer.server.port=8080"

  traefik:
    image: traefik:2.9
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --api.insecure=true --providers.docker
    ports:
      - "8080:80"
